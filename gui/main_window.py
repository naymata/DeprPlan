# -*- coding: utf-8 -*-
import sys
from typing import List

from PyQt5 import QtCore, QtWidgets

from gui import add_product_window as apw
from models import product as p
from xlsx import xlsx_export as ex


# Form implementation generated from reading ui file '.\main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


class Ui_MainWindow(object):
    product_lists: list

    def __init__(self):
        super().__init__()
        self.add_product_window = None
        self.product_lists = []

    def setup_ui(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.closeBtn = QtWidgets.QPushButton(self.centralwidget)
        self.closeBtn.setGeometry(QtCore.QRect(690, 530, 90, 25))
        self.closeBtn.setMaximumSize(QtCore.QSize(90, 25))
        self.closeBtn.setObjectName("closeBtn")
        self.closeBtn.clicked.connect(self.close_btn)
        self.addProductBtn = QtWidgets.QPushButton(self.centralwidget)
        self.addProductBtn.setGeometry(QtCore.QRect(690, 210, 90, 25))
        self.addProductBtn.setMaximumSize(QtCore.QSize(90, 25))
        self.addProductBtn.setObjectName("addProductBtn")
        self.addProductBtn.clicked.connect(self.add_product_btn)
        self.exportBtn = QtWidgets.QPushButton(self.centralwidget)
        self.exportBtn.setGeometry(QtCore.QRect(690, 420, 90, 25))
        self.exportBtn.setMaximumSize(QtCore.QSize(90, 25))
        self.exportBtn.setObjectName("exportBtn")
        self.exportBtn.clicked.connect(self.export_btn)
        self.companyName = QtWidgets.QLineEdit(self.centralwidget)
        self.companyName.setGeometry(QtCore.QRect(670, 120, 121, 20))
        self.companyName.setObjectName("companyName")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(670, 100, 91, 16))
        self.label.setObjectName("label")
        self.deleteProductBtn = QtWidgets.QPushButton(self.centralwidget)
        self.deleteProductBtn.setGeometry(QtCore.QRect(690, 270, 90, 25))
        self.deleteProductBtn.setMaximumSize(QtCore.QSize(90, 25))
        self.deleteProductBtn.setObjectName("deleteProductBtn")
        self.deleteProductBtn.clicked.connect(self.delete_product_btn)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 661, 601))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.setHorizontalHeaderLabels(["Name", "Price", "Salvage Value", "Class", "Depreciation Amount"])
        MainWindow.setCentralWidget(self.centralwidget)
        self.change_column_size()
        self.retranslate_ui(MainWindow)
        self.load_data()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslate_ui(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.closeBtn.setText(_translate("MainWindow", "Close"))
        self.addProductBtn.setText(_translate("MainWindow", "Add Product"))
        self.exportBtn.setText(_translate("MainWindow", "Export"))
        self.label.setText(_translate("MainWindow", "Company name:"))
        self.deleteProductBtn.setText(_translate("MainWindow", "Delete Product"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Name"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Price"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Salvage value"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Class"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Depreciation amount"))

    def add_product_btn(self):
        try:
            self.add_product_window = apw.Ui_Form(self.product_lists)
            self.add_product_window.show()
            self.add_product_window.product_added.connect(self.update_data)
        except Exception as e:
            QtWidgets.QMessageBox.critical(None, 'Error', f'{e}')
            return

    def delete_product_btn(self):
        try:
            selected_row = self.tableWidget.currentRow()
            if selected_row >= 0:
                self.product_lists.pop(selected_row)
                self.load_data()
            else:
                QtWidgets.QMessageBox.warning(None, 'Error', 'Product is not selected')
        except Exception as e:
            QtWidgets.QMessageBox.critical(None, 'Error', f'{e}')
            return

    def export_btn(self):
        if self.companyName.text() == "":
            QtWidgets.QMessageBox.warning(None, 'Invalid information', 'Company name is invalid')
            return
        else:
            xls = ex.XlsxExport(self.companyName.text(), self.product_lists)
            ex.XlsxExport.write_to_xlsx(xls)
            QtWidgets.QMessageBox.warning(None,'Done','Information is exported')

    def close_btn(self):
        QtWidgets.QApplication.exit()

    def update_data(self, arg1, product_list, arg3):
        row = 0
        self.tableWidget.setRowCount(len(product_list))
        for product in product_list:
            self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(product.get_name()))
            self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(str(product.get_price())))
            self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(str(product.get_salvage_value())))
            self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(product.get_asset_class()))
            self.tableWidget.setItem(row, 4, QtWidgets.QTableWidgetItem(str(product.get_depreciation_amount())))
            row += 1

    def load_data(self):
        self.tableWidget.setRowCount(len(self.product_lists))  # Set row count based on product_lists
        for row, product in enumerate(self.product_lists):
            self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(product.get_name()))
            self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(str(product.get_price())))
            self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(str(product.get_salvage_value())))
            self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(product.get_asset_class()))
            self.tableWidget.setItem(row, 4, QtWidgets.QTableWidgetItem(str(product.get_depreciation_amount())))

    def change_column_size(self):
        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 100)
        self.tableWidget.setColumnWidth(2, 100)
        self.tableWidget.setColumnWidth(3, 100)
        self.tableWidget.setColumnWidth(4, 200)


def main():
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setup_ui(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
